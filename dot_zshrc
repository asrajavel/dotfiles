#!/usr/bin/env zsh

if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#ZSH_THEME="robbyrussell"
ZSH_THEME="powerlevel10k/powerlevel10k"

plugins=(
    zsh-autosuggestions
    zsh-syntax-highlighting
    zsh-mouse-mode
)

# eval "$(atuin init zsh)"
# bindkey '^[OA' _atuin_search_widget

export ZSH="/Users/rajavel.as/.oh-my-zsh"
source $ZSH/oh-my-zsh.sh
# source /usr/local/opt/powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

alias ssh="fkst-cli installCert; ssh"

# this will make sure jumping and deleting is based on space only
export WORDCHARS='*?_-.[]~=&;!#$%^(){}<>|'

fwdd() {
    ssh -N -L localhost:1234:$1:16000 10.64.30.168
}

db() {
    ssh -N -L localhost:3310:master.shield-raw-mysql-v2.prod.altair.fkcloud.in:3306 10.64.30.168
}

hystrix() {
    ssh -N -D 5600 10.32.169.62
}

namespace() {
  sed -i '' "s/namespace: .*$/namespace: $1/" ~/.kube/config
}

podd() {
  pods | columnColor
#   kubectl get pods -o wide --sort-by=.metadata.creationTimestamp --no-headers | tail -r
}

pp() {
#   watch -n 5 -x zsh -ic podd
  watch -n 5 -d 'kubectl get pods -o wide --sort-by=.metadata.creationTimestamp --no-headers | tail -r'
}

pods() {
  kubectl get pods -o wide --sort-by=.metadata.creationTimestamp --no-headers | tail -r
}

findFirstPod() {
  local getPods=$(pods | grep -E '1/1|2/2|3/3|4/4|5/5')
  local firstPod=$(echo "$getPods" | grep "$1" | head -1 | awk '{print $1}')
  echo "$firstPod"
}

container() {
  local firstPod=$(findFirstPod $1)
  local containers=$(kubectl get pods $firstPod -o jsonpath='{.spec.containers[*].name}' | tr -s ' ' '\n')
  local chosenContainer=$(echo "$containers" | grep "$1")
  echo "$chosenContainer"
}

log() {
  local selectedPod=$(findFirstPod $1)
  local arguments="${@:2}"

  echo "pod: $selectedPod" >&2
  echo "arguments: $arguments" >&2
  echo "\n\n\n\n\n"

  kubectl logs $selectedPod "${@:2}" | logColor
}

logf() {
  local selectedPod=$(findFirstPod $1)
  local arguments="${@:2}"

  echo "pod: $selectedPod" >&2
  echo "arguments: $arguments" >&2
  echo "\n\n\n\n\n"

  kubectl logs $selectedPod -f --since=1s "${@:2}" | logColor
}

logs() {
  echo "all pod logs: " >&2
  kubectl logs -f -lfcp/vpc=Fk-Prod --max-log-requests 200 | logColor
}

services() {
  kubectl get services
}

events() {
  kubectl get events --sort-by='.metadata.creationTimestamp'
}

execPod() {
  local firstPod=$(kubectl get pods | grep maverick | awk '{print $1}')
  kubectl exec $firstPod -c mtl-sidecar -it bash
}

logColor() {
  sed -u -E 's/(.*INFO.*)/\x1B[34m\1\x1B[0m/;s/(.*WARN.*)/\x1B[33m\1\x1B[0m/;s/(.*ERROR.*)/\x1B[31m\1\x1B[0m/'
}

columnColor() {
  awk 'BEGIN{OFS="\t"}{split($0, a, /[[:space:]]+/); for (i=1; i<=NF; i++) printf "\033[%dm%s\033[0m%s", 29+i, a[i], (i<NF?OFS:"\n")}'
}

removeJunkLogs() {
  grep -v \
  -e '/elb-healthcheck' -e '/isReady' -e '/rotation' \
  -e 'RequestFilter' \
  -e 'updating AB config' -e 'Please update to the latest stable AB Library Version'
}

logz() {
  local pod=$(findFirstPod $1)


  local kubectlLogsCommand =

  echo kubectlLogsCommand
}

reinstall() {
  helm del fre-rajavel
  helm dependency build
  helm install fre-rajavel . --values ./values.yaml
}

source ~/google-cloud-sdk/completion.zsh.inc
source ~/google-cloud-sdk/path.zsh.inc

export PATH="${PATH}:${HOME}/.krew/bin"
export JAVA_HOME=$(/usr/libexec/java_home)
source <(kubectl completion zsh)
export SPARK_HOME="/usr/local/Cellar/apache-spark/3.2.1/libexec"
export PATH=${PATH}:/usr/local/mysql/bin/
export PATH=${PATH}:/usr/local/Cellar/mysql@5.7/5.7.40/bin
export PATH=${PATH}:/Applications/IntelliJ\ IDEA\ CE.app/Contents/plugins/maven/lib/maven3/bin
export PATH=${PATH}:/Library/Java/JavaVirtualMachines/jdk1.8.0_261.jdk/Contents/Home/bin
export PATH=${PATH}:/Users/rajavel.as/Library/Python/3.9/bin

export SPARK_HOME=/usr/local/Cellar/apache-spark/3.3.1/libexec
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_261.jdk/Contents/Home

#EOF
eval "$(atuin init zsh)"